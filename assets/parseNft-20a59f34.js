import{_ as i,n as d}from"./index-1ebb32ef.js";import{d as u}from"./uint8-array-0bc57be6.js";function l(a){return!!a.startsWith("data:application/json;base64")}function o(a){const[,e]=a.split(",");return u(e)}async function f(a){const{client:e,tokenId:n,tokenUri:t}=a;if(l(t))try{return JSON.parse(o(t))}catch(r){throw console.error("Failed to fetch base64 encoded NFT",{tokenId:n,tokenUri:t},r),r}const{download:c}=await i(()=>import("./index-1ebb32ef.js").then(r=>r.cI),["./index-1ebb32ef.js","./index-b446a0d4.css"],import.meta.url);try{if(!t.includes("{id}"))return await(await c({client:e,uri:t})).json()}catch(r){throw console.error("Failed to fetch non-dynamic NFT",{tokenId:n,tokenUri:t},r),r}try{try{return await(await c({client:e,uri:t.replace("{id}",d(n,{size:32}).slice(2))})).json()}catch{return await(await c({client:e,uri:t.replace("{id}",n.toString())})).json()}}catch(r){throw console.error("Failed to fetch dynamic NFT",{tokenId:n,tokenUri:t},r),r}}function h(a,e){switch(e.type){case"ERC721":return{metadata:a,owner:(e==null?void 0:e.owner)??null,id:e.tokenId,tokenURI:e.tokenUri,type:e.type};case"ERC1155":return{metadata:a,owner:(e==null?void 0:e.owner)??null,id:e.tokenId,tokenURI:e.tokenUri,type:e.type,supply:e.supply};default:throw new Error("Invalid NFT type")}}export{o as a,f,l as i,h as p};
