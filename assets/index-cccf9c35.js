import{i as I,g as f,a as w,n as m,c as q,s as P,u as v,d as j,e as A}from"./index-f68404bf.js";import{n as l,g as D}from"./normalizeChainId-99eb7b8a.js";import{g as H,v as L}from"./typedData-aebadd57.js";import"./regex-88e9c765.js";function N(n){return!!I(n.id)}function p(n){const e=I(n);if(!e)throw new Error(`No injected provider found for wallet: "${n}"`);return e}async function k(n,e,o){const t=p(n),i=(await t.request({method:"eth_requestAccounts"}))[0];if(!i)throw new Error("no accounts available");const s=f(i),r=await t.request({method:"eth_chainId"}).then(l);let h=e.chain&&e.chain.id===r?e.chain:w(r);return e.chain&&e.chain.id!==r&&(await T(t,e.chain),h=e.chain),E(t,s,h,o)}async function z(n,e,o){const t=p(n),i=(await t.request({method:"eth_accounts"}))[0];if(!i)throw new Error("no accounts available");const s=f(i),r=await t.request({method:"eth_chainId"}).then(l),h=o&&o.id===r?o:w(r);return E(t,s,h,e)}async function E(n,e,o,t){const c={address:e,async sendTransaction(a){return{transactionHash:await n.request({method:"eth_sendTransaction",params:[{accessList:a.accessList,value:a.value?m(a.value):void 0,gas:a.gas?m(a.gas):void 0,from:this.address,to:a.to,data:a.data}]})}},async signMessage({message:a}){if(!c.address)throw new Error("Provider not setup");const d=(()=>typeof a=="string"?P(a):a.raw instanceof Uint8Array?v(a.raw):a.raw)();return await n.request({method:"personal_sign",params:[d,c.address]})},async signTypedData(a){if(!n||!c.address)throw new Error("Provider not setup");const{domain:d,message:g,primaryType:C}=a,y={EIP712Domain:H({domain:d}),...a.types};L({domain:d,message:g,primaryType:C,types:y});const _=j({domain:d??{},message:g,primaryType:C,types:y},(b,u)=>A(u)?u.toLowerCase():u);return await n.request({method:"eth_signTypedData_v4",params:[c.address,_]})}};async function i(){n.removeListener("accountsChanged",r),n.removeListener("chainChanged",h),n.removeListener("disconnect",s)}function s(){i(),t.emit("disconnect",void 0)}function r(a){if(a[0]){const d={...c,address:f(a[0])};t.emit("accountChanged",d),t.emit("accountsChanged",a)}else s()}function h(a){const d=w(l(a));t.emit("chainChanged",d)}return n.on&&(n.on("accountsChanged",r),n.on("chainChanged",h),n.on("disconnect",s)),[c,o,i,a=>T(n,a)]}async function T(n,e){var t,c,i;const o=m(e.id);try{await n.request({method:"wallet_switchEthereumChain",params:[{chainId:o}]})}catch(s){if((s==null?void 0:s.code)===4902||((c=(t=s==null?void 0:s.data)==null?void 0:t.originalError)==null?void 0:c.code)===4902){const r=await q(e);await n.request({method:"wallet_addEthereumChain",params:[{chainId:o,chainName:r.name,nativeCurrency:r.nativeCurrency,rpcUrls:D(r),blockExplorerUrls:(i=r.explorers)==null?void 0:i.map(h=>h.url)}]})}else throw s}}export{z as autoConnectInjectedWallet,k as connectInjectedWallet,p as getInjectedProvider,N as isInjectedWallet};
