import{bX as s,bY as A,au as O,d as j,_,bZ as E}from"./index-f68404bf.js";function m(e){return globalThis.File&&e instanceof File}function u(e){return!e||!A(e,["data","name"])?!1:!!(typeof e.name=="string"&&(typeof e.data=="string"||s(e.data)))}function S(e,t){if(m(e)&&m(t)){if(e.name===t.name&&e.lastModified===t.lastModified&&e.size===t.size)return!0}else{if(s(e)&&s(t))return O(e,t);if(u(e)&&u(t)&&e.name===t.name){if(typeof e.data=="string"&&typeof t.data=="string")return e.data===t.data;if(s(e.data)&&s(t.data))return O(e.data,t.data)}}return!1}function d(e,t,r){const n=new Map,c=[];for(let a=0;a<t.length;a++){const f=t[a];let i="",l=f;if(m(f))if(r!=null&&r.rewriteFileNames){let F="";if(f.name){const N=f.name.lastIndexOf(".");N>-1&&(F=f.name.substring(N))}i=`${a+r.rewriteFileNames.fileStartNumber}${F}`}else i=`${f.name}`;else u(f)?(l=f.data,r!=null&&r.rewriteFileNames?i=`${a+r.rewriteFileNames.fileStartNumber}`:i=`${f.name}`):r!=null&&r.rewriteFileNames?i=`${a+r.rewriteFileNames.fileStartNumber}`:i=`${a}`;const o=r!=null&&r.uploadWithoutDirectory?"files":`files/${i}`;if(n.has(i)){if(S(n.get(i),f)){c.push(i);continue}throw new Error(`[DUPLICATE_FILE_NAME_ERROR] File name ${i} was passed for more than one different file.`)}n.set(i,f),c.push(i),e.append("file",new Blob([l]),o)}const h={name:"Storage SDK",keyvalues:{...r==null?void 0:r.metadata}};return e.append("pinataMetadata",JSON.stringify(h)),r!=null&&r.uploadWithoutDirectory&&e.append("pinataOptions",JSON.stringify({wrapWithDirectory:!1})),{form:e,fileNames:c.map(a=>encodeURIComponent(a))}}function y(e){return m(e)||s(e)||u(e)}function b(e,t=[]){if(y(e))return t.push(e),t;if(typeof e=="object"){if(!e)return t;if(Array.isArray(e))for(const r of e)b(r,t);else Object.keys(e).map(r=>b(e[r],t))}return t}function g(e,t){if(y(e)){if(t.length)return t.shift();console.warn("Not enough URIs to replace all files in object.")}return typeof e=="object"?e&&(Array.isArray(e)?e.map(r=>g(r,t)):Object.fromEntries(Object.entries(e).map(([r,n])=>[r,g(n,t)]))):e}function $(e){return e.includes("/ipfs/")?`ipfs://${e.split("/ipfs/")[1]}`:e}function w(e){return typeof e=="string"?$(e):typeof e=="object"?!e||y(e)?e:Array.isArray(e)?e.map(t=>w(t)):Object.fromEntries(Object.entries(e).map(([t,r])=>[t,w(r)])):e}async function D(e){if(e.files.length===0)return null;const t=e.files.map(f=>y(f)||typeof f=="string").every(f=>!!f);let r;if(t)r=e.files;else{let f=e.files;f=w(f);const i=b(f);if(i.length){const l=await D({...e,files:i});f=g(f,Array.isArray(l)?l:[l])}r=f.map(l=>typeof l=="string"?l:j(l))}const n=new FormData,{fileNames:c,form:h}=d(n,r,e),a=E();if(a==="browser"||a==="node"){const{uploadBatch:f}=await _(()=>import("./web-node-f10d70e8.js"),["assets/web-node-f10d70e8.js","assets/index-f68404bf.js","assets/index-928478a6.css"]),i=await f(e.client,h,c,e);return e.files.length===1?i[0]:i}throw new Error("Please, use the uploadMobile function in mobile environments.")}export{D as upload};
